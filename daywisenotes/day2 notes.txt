summary of day 1

1. parameters picture.
2. performance should be measured
3. lamda expressions, capture class..need..
define a function and assign it somebody else will call it..
4. we will keep getting doubts then the question can we write a small program to clarify our doubts..


void f1()
{

int v1 =3;
[](){}

}

case study..
1. architecture which we drive in
2. performance criteria..
3. at some point... design pattern application.
4. solving case study by using c++ syntaxes.


Direction

0. code base which concepts of c++ is used..
1. templates.
2. STL
3. Threads..

Today
1. templates

data type independent function or a class.

1. syntax of writing a template.
2. telling the compiler hey look these are data types I plan to use with the template.

see here comes a template class or a template function  == think in terms of a group of functions..


ok we see a template definition ( group of things)
how are using this template definition   == instantiating the template


lreference
rrefernce.

void f1(int &&x)
{
f1(3);

}

you are creating a class.
somebody else is using the class.

void f2(int &j)
{

}

int main()
{

int i =3;

}






2. STL

next session
1. some topics STL
2. threads..


1. template... small story
2. perfect forwarding..
3. lreference and rreference.
4. why should i use rreference... in that context.. move operation..
5. why do a move... = transfer ownership of my object to somebody else..




String s="hello";
String s1 =std::move(s);  //why do this..transfer ownership of my object to somebody else..
cout << s;

perfect forwarding..

1. do you have a templatized function.
2. i want this function to take lreference or reference.
3. it should remember whether it look lreference or rreference, this is called as perfect forwarding..




1. some idea about the picture
2. templized function

calculator program which is templazed for addition, division, multiplication and subtraction
it take two operands..



1.you need a templatized function which can take lvalue reference and rvalue reference.
2. but within this templatizdd function it looks as though everything is lvalue reference despite me passing
rvalue reference.
3. how do prevent his.. std::forward.. this is called as perfect forwarding..


remember 

perfect forwarding
calculator program..

currently our focus.
today

1. deal with templates in a minimum way...
2. talk with stl.
3. move on to threads.
4. talk about design... ( class design, design patterns)
5. talk about case study..

syntax.

1. lamda expression
2. template function, perfect forwarding.. instantiate the template..
3. auto..  decltype ( want to know the data type of an expression .. again relevant only if we are writing
templatized function)

experience means how well we can "generalize our learning"

STL what does it mean to learn.

1. we should be "real" I like datastructures these are useless words most of times in the project.


be real.

1. ok what is datastructure.
1.1 we have group of things.
1.2 we have some operations to perform. ( show patience and spend time on this)
1.3 figure out from the library which is best one which can help us in 1.2 and 1.1






what is tree ? Tree is a connected graph without cycles. to tell this I should approach
tree from maths point of view, in Maths there is no topic called tree. there is a topic graph
in graph tree is one subset..
in computers 


I want to use DS stop..

1. tell me what operations and confirm these are the operations you want to do..
2. then we can pick up what to do..

I want to use DS.

1. patiently figure out the operations.
2. think what type of element you want to put In DS. this does not matter for the DS, it matters for 
us in the project.
3. learn how to do with in that particular programming language.. learn other person design..

I want  fixed size array 
array.. i want to add and i want to print all elements.. occasionally search...

STL

1. containers.
2. algorithsm
3. Iterators.










.





















